# <<<<<<< HEAD
# spring.application.name=db_busify
# server.port =8080

# # spring.datasource.url=jdbc:mysql://localhost:3306/busify?createDatabaseIfNotExist=true
# # spring.datasource.username=root
# # spring.datasource.password=1111


#  spring.datasource.url=jdbc:mysql://server.aptech.io:3307/busify?createDatabaseIfNotExist=true
#  spring.datasource.username=busify_user
#  spring.datasource.password=busify_password
# =======
spring.application.name=busify
server.port=${SERVER_PORT:8080}
# server.address=${SERVER_ADDRESS:192.168.100.212}

# Database Configuration - Using Environment Variables
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/ticket_bus?createDatabaseIfNotExist=true}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:}

#spring.datasource.url=jdbc:mysql://localhost:3306/busify?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
# spring.docker.compose.enabled=false

# Session configuration
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.jdbc.table-name=SPRING_SESSION

# MongoDB - Using Environment Variables
spring.data.mongodb.uri=${MONGO_URI:mongodb://localhost:27017/busify}
spring.data.mongodb.database=${MONGO_DATABASE:busify}
# spring.data.mongodb.username=${MONGO_USERNAME:root}
# spring.data.mongodb.password=${MONGO_PASSWORD:example}

# JWT Configuration - Using Environment Variables
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.refreshExpiration=${JWT_REFRESH_EXPIRATION:604800000}

# PayPal Config - Using Environment Variables
paypal.client.id=${PAYPAL_CLIENT_ID}
paypal.client.secret=${PAYPAL_CLIENT_SECRET}
paypal.mode=${PAYPAL_MODE:sandbox}

# Currency conversion config
payment.currency.usd-to-vnd-rate=25000

# VNPay Configuration - Using Environment Variables
vnpay.merchant.code=${VNPAY_MERCHANT_CODE}
vnpay.secret.key=${VNPAY_SECRET_KEY}
vnpay.url=${VNPAY_URL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}
vnpay.refund.url=${VNPAY_REFUND_URL:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}
vnpay.return-url=${VNPAY_RETURN_URL:http://localhost:3000/payment/callback}
vnpay.version=2.1.0
vnpay.command=pay
vnpay.order-type=other

# Google OAuth2 Configuration - Using Environment Variables
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# Email Configuration - Using Environment Variables
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Frontend URL - Using Environment Variables
app.frontend.url=${FRONTEND_URL:http://localhost:3000}
spring.web.cors.allowed-origins=${FRONTEND_URL:http://localhost:3000}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE
spring.web.cors.allowed-headers=*

# Redis configuration - Using Environment Variables
spring.cache.type=redis
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}

# Cloudinary Configuration - Using Environment Variables
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

# Configuration for scheduler send revenue report - Using Environment Variables
busify.admin.user-email=${ADMIN_EMAIL:admin@gmail.com}

spring.task.scheduling.pool.size=5
spring.task.scheduling.thread-name-prefix=busify-scheduler-

# Notification settings (optional)
busify.notification.monthly-report.enabled=true
busify.notification.retention-days=90

# Reports configuration
busify.reports.storage.path=./storage
busify.reports.cleanup-days=90


# Swagger configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
#springdoc.swagger-ui.operationsSorter=method
#springdoc.swagger-ui.tagsSorter=alpha
#springdoc.swagger-ui.tryItOutEnabled=true
#springdoc.packages-to-scan=com.busify.project
#springdoc.paths-to-match=/api/**


# OpenRouter configuration (compatible with OpenAI API)
openai.api.key=${OPENAI_API_KEY}
openai.api.model=meta-llama/llama-3.3-8b-instruct:free
openai.api.base-url=https://openrouter.ai/api/v1
openai.api.timeout=30
openai.api.max-tokens=500
openai.api.temperature=0.7